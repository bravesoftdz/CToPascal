grammar miniC;
start
    :   initial?
    ;
initial
    :   'int main()' blockItemList
    ;

blockItemList
    :   LeftBrace (blockItem)* RightBrace
    ;

blockItem
    :   blockItemList
    |   selectionStat
    |   iterationStat
    |   assigmentStat
    |   arithmeticStat
    |   varibleDecl
    |   constDecl
    |   ';'
    ;

selectionStat
    :   If  expression RightParen stat elseStat?
    ;

iterationStat
    :   While expression RightParen stat
    ;

assigmentStat
    :   Word Assign (Word|Number) ';'
    ;

varibleDecl
    :   Identifier Word (Assign (Word|Number))? ';'
    ;

arithmeticStat
    :   Word Assign (Word|Number) ArithmeticOperation (Word|Number) ';'
    ;

constDecl
    :   Const Identifier Word Assign (Word|Number) ';'
    ;

expression
    :   (Word|Number) RelationalOperation (Word|Number)
    ;

stat
    :   block
    |   assigmentStat
    |   arithmeticStat
//    |   '{' (assigmentStat)+ '}'
    ;

block
    :   '{' stat* '}'
    ;

elseStat
    :   Else stat
    ;

Identifier
    :   Int
    |   Float
    |   Long
    |   Short
    |   Double
    ;

RelationalOperation
    :   Less
    |   LessEqual
    |   Greater
    |   GreaterEqual
    |   Equal
    |   NotEqual
    ;

ArithmeticOperation
    :   Plus
    |   Minus
    |   Star
    |   Div
    |   Mod
    ;

LogicalOperation
    :   And
    |   Or
    |   Not
    ;

Else
    :   'else'
    |   'else '
    ;

While
    :   'while('
    |   'while ' LeftParen
    ;

If
    :   'if('
    |   'if ' LeftParen
    ;

Word
    :   Nondigit
        (   Nondigit
        |   Digit
        )*
    ;

Number
    :   Digit
    |   [1-9] (Digit)+
    ;

Less : '<';
LessEqual : '<=';
Greater : '>';
GreaterEqual : '>=';
Equal : '==';
NotEqual : '!=';
And : '&&';
Or : '||';
Not : '!';
Plus : '+';
Minus : '-';
Star : '*';
Div : '/';
Mod : '%';
Assign : '=';
Const : 'const ';
Double : 'double';
Float : 'float';
Int : 'int';
Long : 'long';
Short : 'short';
LeftParen : '(';
RightParen : ')';
LeftBrace : '{';
RightBrace : '}';
Semi : ';';
Comma : ',';

fragment
Nondigit
    :   [a-zA-Z_]
    ;

fragment
Digit
    :   [0-9]
    ;

// ignore the lines generated by c preprocessor
// sample line : '#line 1 "/home/dm/files/dk1.h" 1'
Whitespace
    :   [ \t]+
        -> skip
    ;
Newline
    :   (   '\r' '\n'?
        |   '\n'
        )
        -> skip
    ;
BlockComment
    :   '/*' .*? '*/'
        -> skip
    ;
LineComment
    :   '//' ~[\r\n]*
        -> skip
    ;